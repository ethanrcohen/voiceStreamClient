// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/voice.proto

package voicestream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Voice_StreamingVoice_FullMethodName = "/five9.voicestream.Voice/StreamingVoice"
)

// VoiceClient is the client API for Voice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceClient interface {
	// Method for bidirectional streaming of messages:
	// send audio of the user's speech and receive feedback in response.
	StreamingVoice(ctx context.Context, opts ...grpc.CallOption) (Voice_StreamingVoiceClient, error)
}

type voiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceClient(cc grpc.ClientConnInterface) VoiceClient {
	return &voiceClient{cc}
}

func (c *voiceClient) StreamingVoice(ctx context.Context, opts ...grpc.CallOption) (Voice_StreamingVoiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Voice_ServiceDesc.Streams[0], Voice_StreamingVoice_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &voiceStreamingVoiceClient{stream}
	return x, nil
}

type Voice_StreamingVoiceClient interface {
	Send(*StreamingVoiceRequest) error
	Recv() (*StreamingVoiceResponse, error)
	grpc.ClientStream
}

type voiceStreamingVoiceClient struct {
	grpc.ClientStream
}

func (x *voiceStreamingVoiceClient) Send(m *StreamingVoiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voiceStreamingVoiceClient) Recv() (*StreamingVoiceResponse, error) {
	m := new(StreamingVoiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VoiceServer is the server API for Voice service.
// All implementations must embed UnimplementedVoiceServer
// for forward compatibility
type VoiceServer interface {
	// Method for bidirectional streaming of messages:
	// send audio of the user's speech and receive feedback in response.
	StreamingVoice(Voice_StreamingVoiceServer) error
	mustEmbedUnimplementedVoiceServer()
}

// UnimplementedVoiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceServer struct {
}

func (UnimplementedVoiceServer) StreamingVoice(Voice_StreamingVoiceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingVoice not implemented")
}
func (UnimplementedVoiceServer) mustEmbedUnimplementedVoiceServer() {}

// UnsafeVoiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceServer will
// result in compilation errors.
type UnsafeVoiceServer interface {
	mustEmbedUnimplementedVoiceServer()
}

func RegisterVoiceServer(s grpc.ServiceRegistrar, srv VoiceServer) {
	s.RegisterService(&Voice_ServiceDesc, srv)
}

func _Voice_StreamingVoice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceServer).StreamingVoice(&voiceStreamingVoiceServer{stream})
}

type Voice_StreamingVoiceServer interface {
	Send(*StreamingVoiceResponse) error
	Recv() (*StreamingVoiceRequest, error)
	grpc.ServerStream
}

type voiceStreamingVoiceServer struct {
	grpc.ServerStream
}

func (x *voiceStreamingVoiceServer) Send(m *StreamingVoiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voiceStreamingVoiceServer) Recv() (*StreamingVoiceRequest, error) {
	m := new(StreamingVoiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Voice_ServiceDesc is the grpc.ServiceDesc for Voice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "five9.voicestream.Voice",
	HandlerType: (*VoiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingVoice",
			Handler:       _Voice_StreamingVoice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/voice.proto",
}
